// Copyright lowRISC contributors.
// Licensed under the Apache License, Version 2.0, see LICENSE for details.
// SPDX-License-Identifier: Apache-2.0
//
// Register Package auto-generated by `reggen` containing data structure

package dma_reg_pkg;

  // Address widths within the block
  parameter int BlockAw = 6;

  ////////////////////////////
  // Typedefs for registers //
  ////////////////////////////

  typedef struct packed {logic [31:0] q;} dma_reg2hw_ptr_in_reg_t;

  typedef struct packed {logic [31:0] q;} dma_reg2hw_ptr_out_reg_t;

  typedef struct packed {
    logic [31:0] q;
    logic        qe;
  } dma_reg2hw_dma_start_reg_t;

  typedef struct packed {struct packed {logic q;} done;} dma_reg2hw_done_reg_t;

  typedef struct packed {logic [31:0] q;} dma_reg2hw_src_ptr_inc_reg_t;

  typedef struct packed {logic [31:0] q;} dma_reg2hw_dst_ptr_inc_reg_t;

  typedef struct packed {logic [31:0] q;} dma_reg2hw_rx_wait_mode_reg_t;

  typedef struct packed {logic [31:0] q;} dma_reg2hw_tx_wait_mode_reg_t;

  typedef struct packed {logic [1:0] q;} dma_reg2hw_data_type_reg_t;

  typedef struct packed {logic q;} dma_reg2hw_circular_mode_reg_t;

  typedef struct packed {
    struct packed {
      logic d;
      logic de;
    } done;
    struct packed {
      logic d;
      logic de;
    } halfway;
  } dma_hw2reg_done_reg_t;

  // Register -> HW type
  typedef struct packed {
    dma_reg2hw_ptr_in_reg_t ptr_in;  // [228:197]
    dma_reg2hw_ptr_out_reg_t ptr_out;  // [196:165]
    dma_reg2hw_dma_start_reg_t dma_start;  // [164:132]
    dma_reg2hw_done_reg_t done;  // [131:131]
    dma_reg2hw_src_ptr_inc_reg_t src_ptr_inc;  // [130:99]
    dma_reg2hw_dst_ptr_inc_reg_t dst_ptr_inc;  // [98:67]
    dma_reg2hw_rx_wait_mode_reg_t rx_wait_mode;  // [66:35]
    dma_reg2hw_tx_wait_mode_reg_t tx_wait_mode;  // [34:3]
    dma_reg2hw_data_type_reg_t data_type;  // [2:1]
    dma_reg2hw_circular_mode_reg_t circular_mode;  // [0:0]
  } dma_reg2hw_t;

  // HW -> register type
  typedef struct packed {
    dma_hw2reg_done_reg_t done;  // [3:0]
  } dma_hw2reg_t;

  // Register offsets
  parameter logic [BlockAw-1:0] DMA_PTR_IN_OFFSET = 6'h0;
  parameter logic [BlockAw-1:0] DMA_PTR_OUT_OFFSET = 6'h4;
  parameter logic [BlockAw-1:0] DMA_DMA_START_OFFSET = 6'h8;
  parameter logic [BlockAw-1:0] DMA_DONE_OFFSET = 6'hc;
  parameter logic [BlockAw-1:0] DMA_SRC_PTR_INC_OFFSET = 6'h10;
  parameter logic [BlockAw-1:0] DMA_DST_PTR_INC_OFFSET = 6'h14;
  parameter logic [BlockAw-1:0] DMA_RX_WAIT_MODE_OFFSET = 6'h18;
  parameter logic [BlockAw-1:0] DMA_TX_WAIT_MODE_OFFSET = 6'h1c;
  parameter logic [BlockAw-1:0] DMA_DATA_TYPE_OFFSET = 6'h20;
  parameter logic [BlockAw-1:0] DMA_CIRCULAR_MODE_OFFSET = 6'h24;

  // Register index
  typedef enum int {
    DMA_PTR_IN,
    DMA_PTR_OUT,
    DMA_DMA_START,
    DMA_DONE,
    DMA_SRC_PTR_INC,
    DMA_DST_PTR_INC,
    DMA_RX_WAIT_MODE,
    DMA_TX_WAIT_MODE,
    DMA_DATA_TYPE,
    DMA_CIRCULAR_MODE
  } dma_id_e;

  // Register width information to check illegal writes
  parameter logic [3:0] DMA_PERMIT[10] = '{
      4'b1111,  // index[0] DMA_PTR_IN
      4'b1111,  // index[1] DMA_PTR_OUT
      4'b1111,  // index[2] DMA_DMA_START
      4'b0001,  // index[3] DMA_DONE
      4'b1111,  // index[4] DMA_SRC_PTR_INC
      4'b1111,  // index[5] DMA_DST_PTR_INC
      4'b1111,  // index[6] DMA_RX_WAIT_MODE
      4'b1111,  // index[7] DMA_TX_WAIT_MODE
      4'b0001,  // index[8] DMA_DATA_TYPE
      4'b0001  // index[9] DMA_CIRCULAR_MODE
  };

endpackage

